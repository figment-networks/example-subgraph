// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Block extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Block entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Block must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Block", id.toString(), this);
    }
  }

  static load(id: string): Block | null {
    return changetype<Block | null>(store.get("Block", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get header(): string | null {
    let value = this.get("header");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set header(value: string | null) {
    if (!value) {
      this.unset("header");
    } else {
      this.set("header", Value.fromString(<string>value));
    }
  }

  get evidence(): string | null {
    let value = this.get("evidence");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set evidence(value: string | null) {
    if (!value) {
      this.unset("evidence");
    } else {
      this.set("evidence", Value.fromString(<string>value));
    }
  }

  get lastCommit(): string | null {
    let value = this.get("lastCommit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lastCommit(value: string | null) {
    if (!value) {
      this.unset("lastCommit");
    } else {
      this.set("lastCommit", Value.fromString(<string>value));
    }
  }

  get resultBeginBlock(): string | null {
    let value = this.get("resultBeginBlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set resultBeginBlock(value: string | null) {
    if (!value) {
      this.unset("resultBeginBlock");
    } else {
      this.set("resultBeginBlock", Value.fromString(<string>value));
    }
  }

  get resultEndBlock(): string | null {
    let value = this.get("resultEndBlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set resultEndBlock(value: string | null) {
    if (!value) {
      this.unset("resultEndBlock");
    } else {
      this.set("resultEndBlock", Value.fromString(<string>value));
    }
  }

  get transactions(): Array<string> | null {
    let value = this.get("transactions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set transactions(value: Array<string> | null) {
    if (!value) {
      this.unset("transactions");
    } else {
      this.set("transactions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get validatorUpdates(): Array<string> | null {
    let value = this.get("validatorUpdates");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set validatorUpdates(value: Array<string> | null) {
    if (!value) {
      this.unset("validatorUpdates");
    } else {
      this.set("validatorUpdates", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class HeaderOnlyBlock extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HeaderOnlyBlock entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HeaderOnlyBlock must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HeaderOnlyBlock", id.toString(), this);
    }
  }

  static load(id: string): HeaderOnlyBlock | null {
    return changetype<HeaderOnlyBlock | null>(store.get("HeaderOnlyBlock", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get header(): string | null {
    let value = this.get("header");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set header(value: string | null) {
    if (!value) {
      this.unset("header");
    } else {
      this.set("header", Value.fromString(<string>value));
    }
  }
}

export class EventData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EventData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EventData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EventData", id.toString(), this);
    }
  }

  static load(id: string): EventData | null {
    return changetype<EventData | null>(store.get("EventData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get event(): string | null {
    let value = this.get("event");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set event(value: string | null) {
    if (!value) {
      this.unset("event");
    } else {
      this.set("event", Value.fromString(<string>value));
    }
  }

  get block(): string | null {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set block(value: string | null) {
    if (!value) {
      this.unset("block");
    } else {
      this.set("block", Value.fromString(<string>value));
    }
  }
}

export class TransactionData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransactionData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TransactionData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TransactionData", id.toString(), this);
    }
  }

  static load(id: string): TransactionData | null {
    return changetype<TransactionData | null>(store.get("TransactionData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tx(): string | null {
    let value = this.get("tx");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tx(value: string | null) {
    if (!value) {
      this.unset("tx");
    } else {
      this.set("tx", Value.fromString(<string>value));
    }
  }

  get block(): string | null {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set block(value: string | null) {
    if (!value) {
      this.unset("block");
    } else {
      this.set("block", Value.fromString(<string>value));
    }
  }
}

export class Header extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Header entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Header must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Header", id.toString(), this);
    }
  }

  static load(id: string): Header | null {
    return changetype<Header | null>(store.get("Header", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get version(): string | null {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set version(value: string | null) {
    if (!value) {
      this.unset("version");
    } else {
      this.set("version", Value.fromString(<string>value));
    }
  }

  get chainId(): string | null {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set chainId(value: string | null) {
    if (!value) {
      this.unset("chainId");
    } else {
      this.set("chainId", Value.fromString(<string>value));
    }
  }

  get height(): BigInt | null {
    let value = this.get("height");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set height(value: BigInt | null) {
    if (!value) {
      this.unset("height");
    } else {
      this.set("height", Value.fromBigInt(<BigInt>value));
    }
  }

  get time(): string | null {
    let value = this.get("time");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set time(value: string | null) {
    if (!value) {
      this.unset("time");
    } else {
      this.set("time", Value.fromString(<string>value));
    }
  }

  get lastBlockId(): string | null {
    let value = this.get("lastBlockId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lastBlockId(value: string | null) {
    if (!value) {
      this.unset("lastBlockId");
    } else {
      this.set("lastBlockId", Value.fromString(<string>value));
    }
  }

  get lastCommitHash(): Bytes | null {
    let value = this.get("lastCommitHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lastCommitHash(value: Bytes | null) {
    if (!value) {
      this.unset("lastCommitHash");
    } else {
      this.set("lastCommitHash", Value.fromBytes(<Bytes>value));
    }
  }

  get dataHash(): Bytes | null {
    let value = this.get("dataHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set dataHash(value: Bytes | null) {
    if (!value) {
      this.unset("dataHash");
    } else {
      this.set("dataHash", Value.fromBytes(<Bytes>value));
    }
  }

  get validatorsHash(): Bytes | null {
    let value = this.get("validatorsHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set validatorsHash(value: Bytes | null) {
    if (!value) {
      this.unset("validatorsHash");
    } else {
      this.set("validatorsHash", Value.fromBytes(<Bytes>value));
    }
  }

  get nextValidatorsHash(): Bytes | null {
    let value = this.get("nextValidatorsHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set nextValidatorsHash(value: Bytes | null) {
    if (!value) {
      this.unset("nextValidatorsHash");
    } else {
      this.set("nextValidatorsHash", Value.fromBytes(<Bytes>value));
    }
  }

  get consensusHash(): Bytes | null {
    let value = this.get("consensusHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set consensusHash(value: Bytes | null) {
    if (!value) {
      this.unset("consensusHash");
    } else {
      this.set("consensusHash", Value.fromBytes(<Bytes>value));
    }
  }

  get appHash(): Bytes | null {
    let value = this.get("appHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set appHash(value: Bytes | null) {
    if (!value) {
      this.unset("appHash");
    } else {
      this.set("appHash", Value.fromBytes(<Bytes>value));
    }
  }

  get lastResultsHash(): Bytes | null {
    let value = this.get("lastResultsHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lastResultsHash(value: Bytes | null) {
    if (!value) {
      this.unset("lastResultsHash");
    } else {
      this.set("lastResultsHash", Value.fromBytes(<Bytes>value));
    }
  }

  get evidenceHash(): Bytes | null {
    let value = this.get("evidenceHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set evidenceHash(value: Bytes | null) {
    if (!value) {
      this.unset("evidenceHash");
    } else {
      this.set("evidenceHash", Value.fromBytes(<Bytes>value));
    }
  }

  get proposerAddress(): Bytes | null {
    let value = this.get("proposerAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proposerAddress(value: Bytes | null) {
    if (!value) {
      this.unset("proposerAddress");
    } else {
      this.set("proposerAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get hash(): Bytes | null {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes | null) {
    if (!value) {
      this.unset("hash");
    } else {
      this.set("hash", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Consensus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Consensus entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Consensus must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Consensus", id.toString(), this);
    }
  }

  static load(id: string): Consensus | null {
    return changetype<Consensus | null>(store.get("Consensus", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt | null {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt | null) {
    if (!value) {
      this.unset("block");
    } else {
      this.set("block", Value.fromBigInt(<BigInt>value));
    }
  }

  get app(): BigInt | null {
    let value = this.get("app");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set app(value: BigInt | null) {
    if (!value) {
      this.unset("app");
    } else {
      this.set("app", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Timestamp extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Timestamp entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Timestamp must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Timestamp", id.toString(), this);
    }
  }

  static load(id: string): Timestamp | null {
    return changetype<Timestamp | null>(store.get("Timestamp", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get seconds(): BigInt | null {
    let value = this.get("seconds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set seconds(value: BigInt | null) {
    if (!value) {
      this.unset("seconds");
    } else {
      this.set("seconds", Value.fromBigInt(<BigInt>value));
    }
  }

  get nanos(): i32 {
    let value = this.get("nanos");
    return value!.toI32();
  }

  set nanos(value: i32) {
    this.set("nanos", Value.fromI32(value));
  }
}

export class BlockID extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BlockID entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BlockID must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BlockID", id.toString(), this);
    }
  }

  static load(id: string): BlockID | null {
    return changetype<BlockID | null>(store.get("BlockID", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): Bytes | null {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes | null) {
    if (!value) {
      this.unset("hash");
    } else {
      this.set("hash", Value.fromBytes(<Bytes>value));
    }
  }

  get partSetHeader(): string | null {
    let value = this.get("partSetHeader");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set partSetHeader(value: string | null) {
    if (!value) {
      this.unset("partSetHeader");
    } else {
      this.set("partSetHeader", Value.fromString(<string>value));
    }
  }
}

export class PartSetHeader extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PartSetHeader entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PartSetHeader must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PartSetHeader", id.toString(), this);
    }
  }

  static load(id: string): PartSetHeader | null {
    return changetype<PartSetHeader | null>(store.get("PartSetHeader", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get total(): BigInt | null {
    let value = this.get("total");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set total(value: BigInt | null) {
    if (!value) {
      this.unset("total");
    } else {
      this.set("total", Value.fromBigInt(<BigInt>value));
    }
  }

  get hash(): Bytes | null {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes | null) {
    if (!value) {
      this.unset("hash");
    } else {
      this.set("hash", Value.fromBytes(<Bytes>value));
    }
  }
}

export class EvidenceList extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EvidenceList entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EvidenceList must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EvidenceList", id.toString(), this);
    }
  }

  static load(id: string): EvidenceList | null {
    return changetype<EvidenceList | null>(store.get("EvidenceList", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get evidence(): Array<string> | null {
    let value = this.get("evidence");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set evidence(value: Array<string> | null) {
    if (!value) {
      this.unset("evidence");
    } else {
      this.set("evidence", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Evidence extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Evidence entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Evidence must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Evidence", id.toString(), this);
    }
  }

  static load(id: string): Evidence | null {
    return changetype<Evidence | null>(store.get("Evidence", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get duplicateVoteEvidence(): string | null {
    let value = this.get("duplicateVoteEvidence");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set duplicateVoteEvidence(value: string | null) {
    if (!value) {
      this.unset("duplicateVoteEvidence");
    } else {
      this.set("duplicateVoteEvidence", Value.fromString(<string>value));
    }
  }

  get lightClientAttackEvidence(): string | null {
    let value = this.get("lightClientAttackEvidence");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lightClientAttackEvidence(value: string | null) {
    if (!value) {
      this.unset("lightClientAttackEvidence");
    } else {
      this.set("lightClientAttackEvidence", Value.fromString(<string>value));
    }
  }
}

export class DuplicateVoteEvidence extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DuplicateVoteEvidence entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DuplicateVoteEvidence must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DuplicateVoteEvidence", id.toString(), this);
    }
  }

  static load(id: string): DuplicateVoteEvidence | null {
    return changetype<DuplicateVoteEvidence | null>(
      store.get("DuplicateVoteEvidence", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get voteA(): string | null {
    let value = this.get("voteA");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set voteA(value: string | null) {
    if (!value) {
      this.unset("voteA");
    } else {
      this.set("voteA", Value.fromString(<string>value));
    }
  }

  get voteB(): string | null {
    let value = this.get("voteB");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set voteB(value: string | null) {
    if (!value) {
      this.unset("voteB");
    } else {
      this.set("voteB", Value.fromString(<string>value));
    }
  }

  get totalVotingPower(): BigInt | null {
    let value = this.get("totalVotingPower");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalVotingPower(value: BigInt | null) {
    if (!value) {
      this.unset("totalVotingPower");
    } else {
      this.set("totalVotingPower", Value.fromBigInt(<BigInt>value));
    }
  }

  get validatorPower(): BigInt | null {
    let value = this.get("validatorPower");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set validatorPower(value: BigInt | null) {
    if (!value) {
      this.unset("validatorPower");
    } else {
      this.set("validatorPower", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): string | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set timestamp(value: string | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromString(<string>value));
    }
  }
}

export class EventVote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EventVote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EventVote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EventVote", id.toString(), this);
    }
  }

  static load(id: string): EventVote | null {
    return changetype<EventVote | null>(store.get("EventVote", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get eventVoteType(): string | null {
    let value = this.get("eventVoteType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set eventVoteType(value: string | null) {
    if (!value) {
      this.unset("eventVoteType");
    } else {
      this.set("eventVoteType", Value.fromString(<string>value));
    }
  }

  get height(): BigInt | null {
    let value = this.get("height");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set height(value: BigInt | null) {
    if (!value) {
      this.unset("height");
    } else {
      this.set("height", Value.fromBigInt(<BigInt>value));
    }
  }

  get round(): i32 {
    let value = this.get("round");
    return value!.toI32();
  }

  set round(value: i32) {
    this.set("round", Value.fromI32(value));
  }

  get blockId(): string | null {
    let value = this.get("blockId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set blockId(value: string | null) {
    if (!value) {
      this.unset("blockId");
    } else {
      this.set("blockId", Value.fromString(<string>value));
    }
  }

  get timestamp(): string | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set timestamp(value: string | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromString(<string>value));
    }
  }

  get validatorAddress(): Bytes | null {
    let value = this.get("validatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set validatorAddress(value: Bytes | null) {
    if (!value) {
      this.unset("validatorAddress");
    } else {
      this.set("validatorAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get validatorIndex(): i32 {
    let value = this.get("validatorIndex");
    return value!.toI32();
  }

  set validatorIndex(value: i32) {
    this.set("validatorIndex", Value.fromI32(value));
  }

  get signature(): Bytes | null {
    let value = this.get("signature");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set signature(value: Bytes | null) {
    if (!value) {
      this.unset("signature");
    } else {
      this.set("signature", Value.fromBytes(<Bytes>value));
    }
  }
}

export class LightClientAttackEvidence extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save LightClientAttackEvidence entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LightClientAttackEvidence must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LightClientAttackEvidence", id.toString(), this);
    }
  }

  static load(id: string): LightClientAttackEvidence | null {
    return changetype<LightClientAttackEvidence | null>(
      store.get("LightClientAttackEvidence", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get conflictingBlock(): string | null {
    let value = this.get("conflictingBlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set conflictingBlock(value: string | null) {
    if (!value) {
      this.unset("conflictingBlock");
    } else {
      this.set("conflictingBlock", Value.fromString(<string>value));
    }
  }

  get commonHeight(): BigInt | null {
    let value = this.get("commonHeight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set commonHeight(value: BigInt | null) {
    if (!value) {
      this.unset("commonHeight");
    } else {
      this.set("commonHeight", Value.fromBigInt(<BigInt>value));
    }
  }

  get byzantineValidators(): Array<string> | null {
    let value = this.get("byzantineValidators");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set byzantineValidators(value: Array<string> | null) {
    if (!value) {
      this.unset("byzantineValidators");
    } else {
      this.set(
        "byzantineValidators",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get totalVotingPower(): BigInt | null {
    let value = this.get("totalVotingPower");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalVotingPower(value: BigInt | null) {
    if (!value) {
      this.unset("totalVotingPower");
    } else {
      this.set("totalVotingPower", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): string | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set timestamp(value: string | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromString(<string>value));
    }
  }
}

export class LightBlock extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LightBlock entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LightBlock must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LightBlock", id.toString(), this);
    }
  }

  static load(id: string): LightBlock | null {
    return changetype<LightBlock | null>(store.get("LightBlock", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get signedHeader(): string | null {
    let value = this.get("signedHeader");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set signedHeader(value: string | null) {
    if (!value) {
      this.unset("signedHeader");
    } else {
      this.set("signedHeader", Value.fromString(<string>value));
    }
  }

  get validatorSet(): string | null {
    let value = this.get("validatorSet");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set validatorSet(value: string | null) {
    if (!value) {
      this.unset("validatorSet");
    } else {
      this.set("validatorSet", Value.fromString(<string>value));
    }
  }
}

export class SignedHeader extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SignedHeader entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SignedHeader must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SignedHeader", id.toString(), this);
    }
  }

  static load(id: string): SignedHeader | null {
    return changetype<SignedHeader | null>(store.get("SignedHeader", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get header(): string | null {
    let value = this.get("header");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set header(value: string | null) {
    if (!value) {
      this.unset("header");
    } else {
      this.set("header", Value.fromString(<string>value));
    }
  }

  get commit(): string | null {
    let value = this.get("commit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set commit(value: string | null) {
    if (!value) {
      this.unset("commit");
    } else {
      this.set("commit", Value.fromString(<string>value));
    }
  }
}

export class Commit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Commit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Commit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Commit", id.toString(), this);
    }
  }

  static load(id: string): Commit | null {
    return changetype<Commit | null>(store.get("Commit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get height(): BigInt | null {
    let value = this.get("height");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set height(value: BigInt | null) {
    if (!value) {
      this.unset("height");
    } else {
      this.set("height", Value.fromBigInt(<BigInt>value));
    }
  }

  get round(): i32 {
    let value = this.get("round");
    return value!.toI32();
  }

  set round(value: i32) {
    this.set("round", Value.fromI32(value));
  }

  get blockId(): string | null {
    let value = this.get("blockId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set blockId(value: string | null) {
    if (!value) {
      this.unset("blockId");
    } else {
      this.set("blockId", Value.fromString(<string>value));
    }
  }

  get signatures(): Array<string> | null {
    let value = this.get("signatures");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set signatures(value: Array<string> | null) {
    if (!value) {
      this.unset("signatures");
    } else {
      this.set("signatures", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class CommitSig extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CommitSig entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CommitSig must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CommitSig", id.toString(), this);
    }
  }

  static load(id: string): CommitSig | null {
    return changetype<CommitSig | null>(store.get("CommitSig", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockIdFlag(): string | null {
    let value = this.get("blockIdFlag");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set blockIdFlag(value: string | null) {
    if (!value) {
      this.unset("blockIdFlag");
    } else {
      this.set("blockIdFlag", Value.fromString(<string>value));
    }
  }

  get validatorAddress(): Bytes | null {
    let value = this.get("validatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set validatorAddress(value: Bytes | null) {
    if (!value) {
      this.unset("validatorAddress");
    } else {
      this.set("validatorAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get timestamp(): string | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set timestamp(value: string | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromString(<string>value));
    }
  }

  get signature(): Bytes | null {
    let value = this.get("signature");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set signature(value: Bytes | null) {
    if (!value) {
      this.unset("signature");
    } else {
      this.set("signature", Value.fromBytes(<Bytes>value));
    }
  }
}

export class ValidatorSet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ValidatorSet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ValidatorSet must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ValidatorSet", id.toString(), this);
    }
  }

  static load(id: string): ValidatorSet | null {
    return changetype<ValidatorSet | null>(store.get("ValidatorSet", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get validators(): Array<string> | null {
    let value = this.get("validators");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set validators(value: Array<string> | null) {
    if (!value) {
      this.unset("validators");
    } else {
      this.set("validators", Value.fromStringArray(<Array<string>>value));
    }
  }

  get proposer(): string | null {
    let value = this.get("proposer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proposer(value: string | null) {
    if (!value) {
      this.unset("proposer");
    } else {
      this.set("proposer", Value.fromString(<string>value));
    }
  }

  get totalVotingPower(): BigInt | null {
    let value = this.get("totalVotingPower");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalVotingPower(value: BigInt | null) {
    if (!value) {
      this.unset("totalVotingPower");
    } else {
      this.set("totalVotingPower", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Validator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Validator entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Validator must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Validator", id.toString(), this);
    }
  }

  static load(id: string): Validator | null {
    return changetype<Validator | null>(store.get("Validator", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes | null {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes | null) {
    if (!value) {
      this.unset("address");
    } else {
      this.set("address", Value.fromBytes(<Bytes>value));
    }
  }

  get pubKey(): string | null {
    let value = this.get("pubKey");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pubKey(value: string | null) {
    if (!value) {
      this.unset("pubKey");
    } else {
      this.set("pubKey", Value.fromString(<string>value));
    }
  }

  get votingPower(): BigInt | null {
    let value = this.get("votingPower");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set votingPower(value: BigInt | null) {
    if (!value) {
      this.unset("votingPower");
    } else {
      this.set("votingPower", Value.fromBigInt(<BigInt>value));
    }
  }

  get proposerPriority(): BigInt | null {
    let value = this.get("proposerPriority");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set proposerPriority(value: BigInt | null) {
    if (!value) {
      this.unset("proposerPriority");
    } else {
      this.set("proposerPriority", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class PublicKey extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PublicKey entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PublicKey must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PublicKey", id.toString(), this);
    }
  }

  static load(id: string): PublicKey | null {
    return changetype<PublicKey | null>(store.get("PublicKey", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ed25519(): Bytes | null {
    let value = this.get("ed25519");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set ed25519(value: Bytes | null) {
    if (!value) {
      this.unset("ed25519");
    } else {
      this.set("ed25519", Value.fromBytes(<Bytes>value));
    }
  }

  get secp256k1(): Bytes | null {
    let value = this.get("secp256k1");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set secp256k1(value: Bytes | null) {
    if (!value) {
      this.unset("secp256k1");
    } else {
      this.set("secp256k1", Value.fromBytes(<Bytes>value));
    }
  }
}

export class ResponseBeginBlock extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ResponseBeginBlock entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ResponseBeginBlock must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ResponseBeginBlock", id.toString(), this);
    }
  }

  static load(id: string): ResponseBeginBlock | null {
    return changetype<ResponseBeginBlock | null>(
      store.get("ResponseBeginBlock", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get events(): Array<string> | null {
    let value = this.get("events");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set events(value: Array<string> | null) {
    if (!value) {
      this.unset("events");
    } else {
      this.set("events", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Event extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Event entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Event must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Event", id.toString(), this);
    }
  }

  static load(id: string): Event | null {
    return changetype<Event | null>(store.get("Event", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get eventType(): string | null {
    let value = this.get("eventType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set eventType(value: string | null) {
    if (!value) {
      this.unset("eventType");
    } else {
      this.set("eventType", Value.fromString(<string>value));
    }
  }

  get attributes(): Array<string> | null {
    let value = this.get("attributes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set attributes(value: Array<string> | null) {
    if (!value) {
      this.unset("attributes");
    } else {
      this.set("attributes", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class EventAttribute extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EventAttribute entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EventAttribute must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EventAttribute", id.toString(), this);
    }
  }

  static load(id: string): EventAttribute | null {
    return changetype<EventAttribute | null>(store.get("EventAttribute", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get key(): string | null {
    let value = this.get("key");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set key(value: string | null) {
    if (!value) {
      this.unset("key");
    } else {
      this.set("key", Value.fromString(<string>value));
    }
  }

  get value(): string | null {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set value(value: string | null) {
    if (!value) {
      this.unset("value");
    } else {
      this.set("value", Value.fromString(<string>value));
    }
  }

  get index(): boolean {
    let value = this.get("index");
    return value!.toBoolean();
  }

  set index(value: boolean) {
    this.set("index", Value.fromBoolean(value));
  }
}

export class ResponseEndBlock extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ResponseEndBlock entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ResponseEndBlock must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ResponseEndBlock", id.toString(), this);
    }
  }

  static load(id: string): ResponseEndBlock | null {
    return changetype<ResponseEndBlock | null>(
      store.get("ResponseEndBlock", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get validatorUpdates(): Array<string> | null {
    let value = this.get("validatorUpdates");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set validatorUpdates(value: Array<string> | null) {
    if (!value) {
      this.unset("validatorUpdates");
    } else {
      this.set("validatorUpdates", Value.fromStringArray(<Array<string>>value));
    }
  }

  get consensusParamUpdates(): string | null {
    let value = this.get("consensusParamUpdates");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set consensusParamUpdates(value: string | null) {
    if (!value) {
      this.unset("consensusParamUpdates");
    } else {
      this.set("consensusParamUpdates", Value.fromString(<string>value));
    }
  }

  get events(): Array<string> | null {
    let value = this.get("events");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set events(value: Array<string> | null) {
    if (!value) {
      this.unset("events");
    } else {
      this.set("events", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class ValidatorUpdate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ValidatorUpdate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ValidatorUpdate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ValidatorUpdate", id.toString(), this);
    }
  }

  static load(id: string): ValidatorUpdate | null {
    return changetype<ValidatorUpdate | null>(store.get("ValidatorUpdate", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes | null {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes | null) {
    if (!value) {
      this.unset("address");
    } else {
      this.set("address", Value.fromBytes(<Bytes>value));
    }
  }

  get pubKey(): string | null {
    let value = this.get("pubKey");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pubKey(value: string | null) {
    if (!value) {
      this.unset("pubKey");
    } else {
      this.set("pubKey", Value.fromString(<string>value));
    }
  }

  get power(): BigInt | null {
    let value = this.get("power");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set power(value: BigInt | null) {
    if (!value) {
      this.unset("power");
    } else {
      this.set("power", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ConsensusParams extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ConsensusParams entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ConsensusParams must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ConsensusParams", id.toString(), this);
    }
  }

  static load(id: string): ConsensusParams | null {
    return changetype<ConsensusParams | null>(store.get("ConsensusParams", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): string | null {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set block(value: string | null) {
    if (!value) {
      this.unset("block");
    } else {
      this.set("block", Value.fromString(<string>value));
    }
  }

  get evidence(): string | null {
    let value = this.get("evidence");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set evidence(value: string | null) {
    if (!value) {
      this.unset("evidence");
    } else {
      this.set("evidence", Value.fromString(<string>value));
    }
  }

  get validator(): string | null {
    let value = this.get("validator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set validator(value: string | null) {
    if (!value) {
      this.unset("validator");
    } else {
      this.set("validator", Value.fromString(<string>value));
    }
  }

  get version(): string | null {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set version(value: string | null) {
    if (!value) {
      this.unset("version");
    } else {
      this.set("version", Value.fromString(<string>value));
    }
  }
}

export class BlockParams extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BlockParams entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BlockParams must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BlockParams", id.toString(), this);
    }
  }

  static load(id: string): BlockParams | null {
    return changetype<BlockParams | null>(store.get("BlockParams", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get maxBytes(): BigInt | null {
    let value = this.get("maxBytes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxBytes(value: BigInt | null) {
    if (!value) {
      this.unset("maxBytes");
    } else {
      this.set("maxBytes", Value.fromBigInt(<BigInt>value));
    }
  }

  get maxGas(): BigInt | null {
    let value = this.get("maxGas");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxGas(value: BigInt | null) {
    if (!value) {
      this.unset("maxGas");
    } else {
      this.set("maxGas", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class EvidenceParams extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EvidenceParams entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EvidenceParams must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EvidenceParams", id.toString(), this);
    }
  }

  static load(id: string): EvidenceParams | null {
    return changetype<EvidenceParams | null>(store.get("EvidenceParams", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get maxAgeNumBlocks(): BigInt | null {
    let value = this.get("maxAgeNumBlocks");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxAgeNumBlocks(value: BigInt | null) {
    if (!value) {
      this.unset("maxAgeNumBlocks");
    } else {
      this.set("maxAgeNumBlocks", Value.fromBigInt(<BigInt>value));
    }
  }

  get maxAgeDuration(): string | null {
    let value = this.get("maxAgeDuration");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set maxAgeDuration(value: string | null) {
    if (!value) {
      this.unset("maxAgeDuration");
    } else {
      this.set("maxAgeDuration", Value.fromString(<string>value));
    }
  }

  get maxBytes(): BigInt | null {
    let value = this.get("maxBytes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxBytes(value: BigInt | null) {
    if (!value) {
      this.unset("maxBytes");
    } else {
      this.set("maxBytes", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Duration extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Duration entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Duration must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Duration", id.toString(), this);
    }
  }

  static load(id: string): Duration | null {
    return changetype<Duration | null>(store.get("Duration", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get seconds(): BigInt | null {
    let value = this.get("seconds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set seconds(value: BigInt | null) {
    if (!value) {
      this.unset("seconds");
    } else {
      this.set("seconds", Value.fromBigInt(<BigInt>value));
    }
  }

  get nanos(): i32 {
    let value = this.get("nanos");
    return value!.toI32();
  }

  set nanos(value: i32) {
    this.set("nanos", Value.fromI32(value));
  }
}

export class ValidatorParams extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ValidatorParams entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ValidatorParams must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ValidatorParams", id.toString(), this);
    }
  }

  static load(id: string): ValidatorParams | null {
    return changetype<ValidatorParams | null>(store.get("ValidatorParams", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pubKeyTypes(): Array<string> | null {
    let value = this.get("pubKeyTypes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set pubKeyTypes(value: Array<string> | null) {
    if (!value) {
      this.unset("pubKeyTypes");
    } else {
      this.set("pubKeyTypes", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class VersionParams extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VersionParams entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VersionParams must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VersionParams", id.toString(), this);
    }
  }

  static load(id: string): VersionParams | null {
    return changetype<VersionParams | null>(store.get("VersionParams", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get appVersion(): BigInt | null {
    let value = this.get("appVersion");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set appVersion(value: BigInt | null) {
    if (!value) {
      this.unset("appVersion");
    } else {
      this.set("appVersion", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class TxResult extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TxResult entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TxResult must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TxResult", id.toString(), this);
    }
  }

  static load(id: string): TxResult | null {
    return changetype<TxResult | null>(store.get("TxResult", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get height(): BigInt | null {
    let value = this.get("height");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set height(value: BigInt | null) {
    if (!value) {
      this.unset("height");
    } else {
      this.set("height", Value.fromBigInt(<BigInt>value));
    }
  }

  get index(): BigInt | null {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set index(value: BigInt | null) {
    if (!value) {
      this.unset("index");
    } else {
      this.set("index", Value.fromBigInt(<BigInt>value));
    }
  }

  get tx(): string | null {
    let value = this.get("tx");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tx(value: string | null) {
    if (!value) {
      this.unset("tx");
    } else {
      this.set("tx", Value.fromString(<string>value));
    }
  }

  get result(): string | null {
    let value = this.get("result");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set result(value: string | null) {
    if (!value) {
      this.unset("result");
    } else {
      this.set("result", Value.fromString(<string>value));
    }
  }

  get hash(): Bytes | null {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes | null) {
    if (!value) {
      this.unset("hash");
    } else {
      this.set("hash", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Tx extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Tx entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Tx must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Tx", id.toString(), this);
    }
  }

  static load(id: string): Tx | null {
    return changetype<Tx | null>(store.get("Tx", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get body(): string | null {
    let value = this.get("body");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set body(value: string | null) {
    if (!value) {
      this.unset("body");
    } else {
      this.set("body", Value.fromString(<string>value));
    }
  }

  get authInfo(): string | null {
    let value = this.get("authInfo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set authInfo(value: string | null) {
    if (!value) {
      this.unset("authInfo");
    } else {
      this.set("authInfo", Value.fromString(<string>value));
    }
  }

  get signatures(): Array<Bytes> | null {
    let value = this.get("signatures");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set signatures(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("signatures");
    } else {
      this.set("signatures", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }
}

export class TxBody extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TxBody entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TxBody must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TxBody", id.toString(), this);
    }
  }

  static load(id: string): TxBody | null {
    return changetype<TxBody | null>(store.get("TxBody", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get messages(): Array<string> | null {
    let value = this.get("messages");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set messages(value: Array<string> | null) {
    if (!value) {
      this.unset("messages");
    } else {
      this.set("messages", Value.fromStringArray(<Array<string>>value));
    }
  }

  get memo(): string | null {
    let value = this.get("memo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set memo(value: string | null) {
    if (!value) {
      this.unset("memo");
    } else {
      this.set("memo", Value.fromString(<string>value));
    }
  }

  get timeoutHeight(): BigInt | null {
    let value = this.get("timeoutHeight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timeoutHeight(value: BigInt | null) {
    if (!value) {
      this.unset("timeoutHeight");
    } else {
      this.set("timeoutHeight", Value.fromBigInt(<BigInt>value));
    }
  }

  get extensionOptions(): Array<string> | null {
    let value = this.get("extensionOptions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set extensionOptions(value: Array<string> | null) {
    if (!value) {
      this.unset("extensionOptions");
    } else {
      this.set("extensionOptions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get nonCriticalExtensionOptions(): Array<string> | null {
    let value = this.get("nonCriticalExtensionOptions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set nonCriticalExtensionOptions(value: Array<string> | null) {
    if (!value) {
      this.unset("nonCriticalExtensionOptions");
    } else {
      this.set(
        "nonCriticalExtensionOptions",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }
}

export class Message extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("index", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Message entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Message must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Message", id.toString(), this);
    }
  }

  static load(id: string): Message | null {
    return changetype<Message | null>(store.get("Message", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): i32 {
    let value = this.get("index");
    return value!.toI32();
  }

  set index(value: i32) {
    this.set("index", Value.fromI32(value));
  }

  get typeUrl(): string | null {
    let value = this.get("typeUrl");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set typeUrl(value: string | null) {
    if (!value) {
      this.unset("typeUrl");
    } else {
      this.set("typeUrl", Value.fromString(<string>value));
    }
  }

  get value(): Bytes | null {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set value(value: Bytes | null) {
    if (!value) {
      this.unset("value");
    } else {
      this.set("value", Value.fromBytes(<Bytes>value));
    }
  }
}

export class ExtensionOption extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("index", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExtensionOption entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExtensionOption must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExtensionOption", id.toString(), this);
    }
  }

  static load(id: string): ExtensionOption | null {
    return changetype<ExtensionOption | null>(store.get("ExtensionOption", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): i32 {
    let value = this.get("index");
    return value!.toI32();
  }

  set index(value: i32) {
    this.set("index", Value.fromI32(value));
  }

  get typeUrl(): string | null {
    let value = this.get("typeUrl");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set typeUrl(value: string | null) {
    if (!value) {
      this.unset("typeUrl");
    } else {
      this.set("typeUrl", Value.fromString(<string>value));
    }
  }

  get value(): Bytes | null {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set value(value: Bytes | null) {
    if (!value) {
      this.unset("value");
    } else {
      this.set("value", Value.fromBytes(<Bytes>value));
    }
  }
}

export class PublicKeyAny extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PublicKeyAny entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PublicKeyAny must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PublicKeyAny", id.toString(), this);
    }
  }

  static load(id: string): PublicKeyAny | null {
    return changetype<PublicKeyAny | null>(store.get("PublicKeyAny", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get typeUrl(): string | null {
    let value = this.get("typeUrl");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set typeUrl(value: string | null) {
    if (!value) {
      this.unset("typeUrl");
    } else {
      this.set("typeUrl", Value.fromString(<string>value));
    }
  }

  get value(): Bytes | null {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set value(value: Bytes | null) {
    if (!value) {
      this.unset("value");
    } else {
      this.set("value", Value.fromBytes(<Bytes>value));
    }
  }
}

export class AuthInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuthInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuthInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AuthInfo", id.toString(), this);
    }
  }

  static load(id: string): AuthInfo | null {
    return changetype<AuthInfo | null>(store.get("AuthInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get signerInfos(): Array<string> | null {
    let value = this.get("signerInfos");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set signerInfos(value: Array<string> | null) {
    if (!value) {
      this.unset("signerInfos");
    } else {
      this.set("signerInfos", Value.fromStringArray(<Array<string>>value));
    }
  }

  get fee(): string | null {
    let value = this.get("fee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fee(value: string | null) {
    if (!value) {
      this.unset("fee");
    } else {
      this.set("fee", Value.fromString(<string>value));
    }
  }

  get tip(): string | null {
    let value = this.get("tip");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tip(value: string | null) {
    if (!value) {
      this.unset("tip");
    } else {
      this.set("tip", Value.fromString(<string>value));
    }
  }
}

export class SignerInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SignerInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SignerInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SignerInfo", id.toString(), this);
    }
  }

  static load(id: string): SignerInfo | null {
    return changetype<SignerInfo | null>(store.get("SignerInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get publicKey(): string | null {
    let value = this.get("publicKey");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set publicKey(value: string | null) {
    if (!value) {
      this.unset("publicKey");
    } else {
      this.set("publicKey", Value.fromString(<string>value));
    }
  }

  get modeInfo(): string | null {
    let value = this.get("modeInfo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set modeInfo(value: string | null) {
    if (!value) {
      this.unset("modeInfo");
    } else {
      this.set("modeInfo", Value.fromString(<string>value));
    }
  }

  get sequence(): BigInt | null {
    let value = this.get("sequence");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sequence(value: BigInt | null) {
    if (!value) {
      this.unset("sequence");
    } else {
      this.set("sequence", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ModeInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ModeInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ModeInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ModeInfo", id.toString(), this);
    }
  }

  static load(id: string): ModeInfo | null {
    return changetype<ModeInfo | null>(store.get("ModeInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get single(): string | null {
    let value = this.get("single");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set single(value: string | null) {
    if (!value) {
      this.unset("single");
    } else {
      this.set("single", Value.fromString(<string>value));
    }
  }

  get multi(): string | null {
    let value = this.get("multi");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set multi(value: string | null) {
    if (!value) {
      this.unset("multi");
    } else {
      this.set("multi", Value.fromString(<string>value));
    }
  }
}

export class ModeInfoSingle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ModeInfoSingle entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ModeInfoSingle must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ModeInfoSingle", id.toString(), this);
    }
  }

  static load(id: string): ModeInfoSingle | null {
    return changetype<ModeInfoSingle | null>(store.get("ModeInfoSingle", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get mode(): string | null {
    let value = this.get("mode");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mode(value: string | null) {
    if (!value) {
      this.unset("mode");
    } else {
      this.set("mode", Value.fromString(<string>value));
    }
  }
}

export class ModeInfoMulti extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ModeInfoMulti entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ModeInfoMulti must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ModeInfoMulti", id.toString(), this);
    }
  }

  static load(id: string): ModeInfoMulti | null {
    return changetype<ModeInfoMulti | null>(store.get("ModeInfoMulti", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bitarray(): string | null {
    let value = this.get("bitarray");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bitarray(value: string | null) {
    if (!value) {
      this.unset("bitarray");
    } else {
      this.set("bitarray", Value.fromString(<string>value));
    }
  }

  get modeInfos(): Array<string> | null {
    let value = this.get("modeInfos");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set modeInfos(value: Array<string> | null) {
    if (!value) {
      this.unset("modeInfos");
    } else {
      this.set("modeInfos", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class CompactBitArray extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CompactBitArray entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CompactBitArray must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CompactBitArray", id.toString(), this);
    }
  }

  static load(id: string): CompactBitArray | null {
    return changetype<CompactBitArray | null>(store.get("CompactBitArray", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get extraBitsStored(): BigInt | null {
    let value = this.get("extraBitsStored");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set extraBitsStored(value: BigInt | null) {
    if (!value) {
      this.unset("extraBitsStored");
    } else {
      this.set("extraBitsStored", Value.fromBigInt(<BigInt>value));
    }
  }

  get elems(): Bytes | null {
    let value = this.get("elems");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set elems(value: Bytes | null) {
    if (!value) {
      this.unset("elems");
    } else {
      this.set("elems", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Fee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Fee entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Fee must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Fee", id.toString(), this);
    }
  }

  static load(id: string): Fee | null {
    return changetype<Fee | null>(store.get("Fee", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): Array<string> | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set amount(value: Array<string> | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromStringArray(<Array<string>>value));
    }
  }

  get gasLimit(): BigInt | null {
    let value = this.get("gasLimit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasLimit(value: BigInt | null) {
    if (!value) {
      this.unset("gasLimit");
    } else {
      this.set("gasLimit", Value.fromBigInt(<BigInt>value));
    }
  }

  get payer(): string | null {
    let value = this.get("payer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set payer(value: string | null) {
    if (!value) {
      this.unset("payer");
    } else {
      this.set("payer", Value.fromString(<string>value));
    }
  }

  get granter(): string | null {
    let value = this.get("granter");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set granter(value: string | null) {
    if (!value) {
      this.unset("granter");
    } else {
      this.set("granter", Value.fromString(<string>value));
    }
  }
}

export class Coin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Coin entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Coin must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Coin", id.toString(), this);
    }
  }

  static load(id: string): Coin | null {
    return changetype<Coin | null>(store.get("Coin", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get denom(): string | null {
    let value = this.get("denom");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set denom(value: string | null) {
    if (!value) {
      this.unset("denom");
    } else {
      this.set("denom", Value.fromString(<string>value));
    }
  }

  get amount(): string | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set amount(value: string | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromString(<string>value));
    }
  }
}

export class Tip extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Tip entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Tip must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Tip", id.toString(), this);
    }
  }

  static load(id: string): Tip | null {
    return changetype<Tip | null>(store.get("Tip", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): Array<string> | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set amount(value: Array<string> | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromStringArray(<Array<string>>value));
    }
  }

  get tipper(): string | null {
    let value = this.get("tipper");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tipper(value: string | null) {
    if (!value) {
      this.unset("tipper");
    } else {
      this.set("tipper", Value.fromString(<string>value));
    }
  }
}

export class ResponseDeliverTx extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ResponseDeliverTx entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ResponseDeliverTx must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ResponseDeliverTx", id.toString(), this);
    }
  }

  static load(id: string): ResponseDeliverTx | null {
    return changetype<ResponseDeliverTx | null>(
      store.get("ResponseDeliverTx", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get code(): BigInt | null {
    let value = this.get("code");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set code(value: BigInt | null) {
    if (!value) {
      this.unset("code");
    } else {
      this.set("code", Value.fromBigInt(<BigInt>value));
    }
  }

  get data(): Bytes | null {
    let value = this.get("data");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set data(value: Bytes | null) {
    if (!value) {
      this.unset("data");
    } else {
      this.set("data", Value.fromBytes(<Bytes>value));
    }
  }

  get log(): string | null {
    let value = this.get("log");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set log(value: string | null) {
    if (!value) {
      this.unset("log");
    } else {
      this.set("log", Value.fromString(<string>value));
    }
  }

  get info(): string | null {
    let value = this.get("info");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set info(value: string | null) {
    if (!value) {
      this.unset("info");
    } else {
      this.set("info", Value.fromString(<string>value));
    }
  }

  get gasWanted(): BigInt | null {
    let value = this.get("gasWanted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasWanted(value: BigInt | null) {
    if (!value) {
      this.unset("gasWanted");
    } else {
      this.set("gasWanted", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get events(): Array<string> | null {
    let value = this.get("events");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set events(value: Array<string> | null) {
    if (!value) {
      this.unset("events");
    } else {
      this.set("events", Value.fromStringArray(<Array<string>>value));
    }
  }

  get codespace(): string | null {
    let value = this.get("codespace");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set codespace(value: string | null) {
    if (!value) {
      this.unset("codespace");
    } else {
      this.set("codespace", Value.fromString(<string>value));
    }
  }
}

export class ValidatorSetUpdates extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ValidatorSetUpdates entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ValidatorSetUpdates must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ValidatorSetUpdates", id.toString(), this);
    }
  }

  static load(id: string): ValidatorSetUpdates | null {
    return changetype<ValidatorSetUpdates | null>(
      store.get("ValidatorSetUpdates", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get validatorUpdates(): Array<string> | null {
    let value = this.get("validatorUpdates");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set validatorUpdates(value: Array<string> | null) {
    if (!value) {
      this.unset("validatorUpdates");
    } else {
      this.set("validatorUpdates", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Reward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Reward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Reward must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Reward", id.toString(), this);
    }
  }

  static load(id: string): Reward | null {
    return changetype<Reward | null>(store.get("Reward", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): string | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set amount(value: string | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromString(<string>value));
    }
  }

  get validator(): string | null {
    let value = this.get("validator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set validator(value: string | null) {
    if (!value) {
      this.unset("validator");
    } else {
      this.set("validator", Value.fromString(<string>value));
    }
  }
}

export class PubKey extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PubKey entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PubKey must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PubKey", id.toString(), this);
    }
  }

  static load(id: string): PubKey | null {
    return changetype<PubKey | null>(store.get("PubKey", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get key(): Bytes | null {
    let value = this.get("key");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set key(value: Bytes | null) {
    if (!value) {
      this.unset("key");
    } else {
      this.set("key", Value.fromBytes(<Bytes>value));
    }
  }
}

export class MsgSend extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgSend entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgSend must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgSend", id.toString(), this);
    }
  }

  static load(id: string): MsgSend | null {
    return changetype<MsgSend | null>(store.get("MsgSend", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fromAddress(): string | null {
    let value = this.get("fromAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fromAddress(value: string | null) {
    if (!value) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromString(<string>value));
    }
  }

  get toAddress(): string | null {
    let value = this.get("toAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set toAddress(value: string | null) {
    if (!value) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromString(<string>value));
    }
  }

  get amount(): Array<string> | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set amount(value: Array<string> | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class MsgMultiSend extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgMultiSend entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgMultiSend must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgMultiSend", id.toString(), this);
    }
  }

  static load(id: string): MsgMultiSend | null {
    return changetype<MsgMultiSend | null>(store.get("MsgMultiSend", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get inputs(): Array<string> | null {
    let value = this.get("inputs");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set inputs(value: Array<string> | null) {
    if (!value) {
      this.unset("inputs");
    } else {
      this.set("inputs", Value.fromStringArray(<Array<string>>value));
    }
  }

  get outputs(): Array<string> | null {
    let value = this.get("outputs");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set outputs(value: Array<string> | null) {
    if (!value) {
      this.unset("outputs");
    } else {
      this.set("outputs", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class MsgVerifyInvariant extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgVerifyInvariant entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgVerifyInvariant must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgVerifyInvariant", id.toString(), this);
    }
  }

  static load(id: string): MsgVerifyInvariant | null {
    return changetype<MsgVerifyInvariant | null>(
      store.get("MsgVerifyInvariant", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): string | null {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sender(value: string | null) {
    if (!value) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromString(<string>value));
    }
  }

  get invariantModuleName(): string | null {
    let value = this.get("invariantModuleName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set invariantModuleName(value: string | null) {
    if (!value) {
      this.unset("invariantModuleName");
    } else {
      this.set("invariantModuleName", Value.fromString(<string>value));
    }
  }

  get invariantRoute(): string | null {
    let value = this.get("invariantRoute");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set invariantRoute(value: string | null) {
    if (!value) {
      this.unset("invariantRoute");
    } else {
      this.set("invariantRoute", Value.fromString(<string>value));
    }
  }
}

export class MsgSetWithdrawAddress extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save MsgSetWithdrawAddress entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgSetWithdrawAddress must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgSetWithdrawAddress", id.toString(), this);
    }
  }

  static load(id: string): MsgSetWithdrawAddress | null {
    return changetype<MsgSetWithdrawAddress | null>(
      store.get("MsgSetWithdrawAddress", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get delegatorAddress(): string | null {
    let value = this.get("delegatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set delegatorAddress(value: string | null) {
    if (!value) {
      this.unset("delegatorAddress");
    } else {
      this.set("delegatorAddress", Value.fromString(<string>value));
    }
  }

  get withdrawAddress(): string | null {
    let value = this.get("withdrawAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set withdrawAddress(value: string | null) {
    if (!value) {
      this.unset("withdrawAddress");
    } else {
      this.set("withdrawAddress", Value.fromString(<string>value));
    }
  }
}

export class MsgWithdrawDelegatorReward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save MsgWithdrawDelegatorReward entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgWithdrawDelegatorReward must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgWithdrawDelegatorReward", id.toString(), this);
    }
  }

  static load(id: string): MsgWithdrawDelegatorReward | null {
    return changetype<MsgWithdrawDelegatorReward | null>(
      store.get("MsgWithdrawDelegatorReward", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get delegatorAddress(): string | null {
    let value = this.get("delegatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set delegatorAddress(value: string | null) {
    if (!value) {
      this.unset("delegatorAddress");
    } else {
      this.set("delegatorAddress", Value.fromString(<string>value));
    }
  }

  get validatorAddress(): string | null {
    let value = this.get("validatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set validatorAddress(value: string | null) {
    if (!value) {
      this.unset("validatorAddress");
    } else {
      this.set("validatorAddress", Value.fromString(<string>value));
    }
  }
}

export class MsgWithdrawValidatorCommission extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save MsgWithdrawValidatorCommission entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgWithdrawValidatorCommission must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgWithdrawValidatorCommission", id.toString(), this);
    }
  }

  static load(id: string): MsgWithdrawValidatorCommission | null {
    return changetype<MsgWithdrawValidatorCommission | null>(
      store.get("MsgWithdrawValidatorCommission", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get validatorAddress(): string | null {
    let value = this.get("validatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set validatorAddress(value: string | null) {
    if (!value) {
      this.unset("validatorAddress");
    } else {
      this.set("validatorAddress", Value.fromString(<string>value));
    }
  }
}

export class MsgFundCommunityPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgFundCommunityPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgFundCommunityPool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgFundCommunityPool", id.toString(), this);
    }
  }

  static load(id: string): MsgFundCommunityPool | null {
    return changetype<MsgFundCommunityPool | null>(
      store.get("MsgFundCommunityPool", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): Array<string> | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set amount(value: Array<string> | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromStringArray(<Array<string>>value));
    }
  }

  get depositor(): string | null {
    let value = this.get("depositor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set depositor(value: string | null) {
    if (!value) {
      this.unset("depositor");
    } else {
      this.set("depositor", Value.fromString(<string>value));
    }
  }
}

export class MsgSubmitEvidence extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgSubmitEvidence entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgSubmitEvidence must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgSubmitEvidence", id.toString(), this);
    }
  }

  static load(id: string): MsgSubmitEvidence | null {
    return changetype<MsgSubmitEvidence | null>(
      store.get("MsgSubmitEvidence", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): string | null {
    let value = this.get("submitter");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set submitter(value: string | null) {
    if (!value) {
      this.unset("submitter");
    } else {
      this.set("submitter", Value.fromString(<string>value));
    }
  }

  get evidence(): string | null {
    let value = this.get("evidence");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set evidence(value: string | null) {
    if (!value) {
      this.unset("evidence");
    } else {
      this.set("evidence", Value.fromString(<string>value));
    }
  }
}

export class MsgSubmitProposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgSubmitProposal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgSubmitProposal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgSubmitProposal", id.toString(), this);
    }
  }

  static load(id: string): MsgSubmitProposal | null {
    return changetype<MsgSubmitProposal | null>(
      store.get("MsgSubmitProposal", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get content(): string | null {
    let value = this.get("content");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set content(value: string | null) {
    if (!value) {
      this.unset("content");
    } else {
      this.set("content", Value.fromString(<string>value));
    }
  }

  get initialDeposit(): Array<string> | null {
    let value = this.get("initialDeposit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set initialDeposit(value: Array<string> | null) {
    if (!value) {
      this.unset("initialDeposit");
    } else {
      this.set("initialDeposit", Value.fromStringArray(<Array<string>>value));
    }
  }

  get proposer(): string | null {
    let value = this.get("proposer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proposer(value: string | null) {
    if (!value) {
      this.unset("proposer");
    } else {
      this.set("proposer", Value.fromString(<string>value));
    }
  }
}

export class MsgVote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgVote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgVote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgVote", id.toString(), this);
    }
  }

  static load(id: string): MsgVote | null {
    return changetype<MsgVote | null>(store.get("MsgVote", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposalId(): BigInt | null {
    let value = this.get("proposalId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set proposalId(value: BigInt | null) {
    if (!value) {
      this.unset("proposalId");
    } else {
      this.set("proposalId", Value.fromBigInt(<BigInt>value));
    }
  }

  get voter(): string | null {
    let value = this.get("voter");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set voter(value: string | null) {
    if (!value) {
      this.unset("voter");
    } else {
      this.set("voter", Value.fromString(<string>value));
    }
  }

  get option(): string | null {
    let value = this.get("option");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set option(value: string | null) {
    if (!value) {
      this.unset("option");
    } else {
      this.set("option", Value.fromString(<string>value));
    }
  }
}

export class MsgDeposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgDeposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgDeposit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgDeposit", id.toString(), this);
    }
  }

  static load(id: string): MsgDeposit | null {
    return changetype<MsgDeposit | null>(store.get("MsgDeposit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposalId(): BigInt | null {
    let value = this.get("proposalId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set proposalId(value: BigInt | null) {
    if (!value) {
      this.unset("proposalId");
    } else {
      this.set("proposalId", Value.fromBigInt(<BigInt>value));
    }
  }

  get depositor(): string | null {
    let value = this.get("depositor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set depositor(value: string | null) {
    if (!value) {
      this.unset("depositor");
    } else {
      this.set("depositor", Value.fromString(<string>value));
    }
  }

  get amount(): Array<string> | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set amount(value: Array<string> | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class MsgUnjail extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgUnjail entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgUnjail must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgUnjail", id.toString(), this);
    }
  }

  static load(id: string): MsgUnjail | null {
    return changetype<MsgUnjail | null>(store.get("MsgUnjail", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get validatorAddr(): string | null {
    let value = this.get("validatorAddr");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set validatorAddr(value: string | null) {
    if (!value) {
      this.unset("validatorAddr");
    } else {
      this.set("validatorAddr", Value.fromString(<string>value));
    }
  }
}

export class MsgCreateValidator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgCreateValidator entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgCreateValidator must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgCreateValidator", id.toString(), this);
    }
  }

  static load(id: string): MsgCreateValidator | null {
    return changetype<MsgCreateValidator | null>(
      store.get("MsgCreateValidator", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get commission(): string | null {
    let value = this.get("commission");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set commission(value: string | null) {
    if (!value) {
      this.unset("commission");
    } else {
      this.set("commission", Value.fromString(<string>value));
    }
  }

  get minSelfDelegation(): string | null {
    let value = this.get("minSelfDelegation");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set minSelfDelegation(value: string | null) {
    if (!value) {
      this.unset("minSelfDelegation");
    } else {
      this.set("minSelfDelegation", Value.fromString(<string>value));
    }
  }

  get delegatorAddress(): string | null {
    let value = this.get("delegatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set delegatorAddress(value: string | null) {
    if (!value) {
      this.unset("delegatorAddress");
    } else {
      this.set("delegatorAddress", Value.fromString(<string>value));
    }
  }

  get validatorAddress(): string | null {
    let value = this.get("validatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set validatorAddress(value: string | null) {
    if (!value) {
      this.unset("validatorAddress");
    } else {
      this.set("validatorAddress", Value.fromString(<string>value));
    }
  }

  get pubkey(): string | null {
    let value = this.get("pubkey");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pubkey(value: string | null) {
    if (!value) {
      this.unset("pubkey");
    } else {
      this.set("pubkey", Value.fromString(<string>value));
    }
  }

  get value(): string | null {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set value(value: string | null) {
    if (!value) {
      this.unset("value");
    } else {
      this.set("value", Value.fromString(<string>value));
    }
  }
}

export class MsgEditValidator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgEditValidator entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgEditValidator must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgEditValidator", id.toString(), this);
    }
  }

  static load(id: string): MsgEditValidator | null {
    return changetype<MsgEditValidator | null>(
      store.get("MsgEditValidator", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get validatorAddress(): string | null {
    let value = this.get("validatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set validatorAddress(value: string | null) {
    if (!value) {
      this.unset("validatorAddress");
    } else {
      this.set("validatorAddress", Value.fromString(<string>value));
    }
  }

  get commissionRate(): string | null {
    let value = this.get("commissionRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set commissionRate(value: string | null) {
    if (!value) {
      this.unset("commissionRate");
    } else {
      this.set("commissionRate", Value.fromString(<string>value));
    }
  }

  get minSelfDelegation(): string | null {
    let value = this.get("minSelfDelegation");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set minSelfDelegation(value: string | null) {
    if (!value) {
      this.unset("minSelfDelegation");
    } else {
      this.set("minSelfDelegation", Value.fromString(<string>value));
    }
  }
}

export class MsgDelegate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgDelegate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgDelegate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgDelegate", id.toString(), this);
    }
  }

  static load(id: string): MsgDelegate | null {
    return changetype<MsgDelegate | null>(store.get("MsgDelegate", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get delegatorAddress(): string | null {
    let value = this.get("delegatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set delegatorAddress(value: string | null) {
    if (!value) {
      this.unset("delegatorAddress");
    } else {
      this.set("delegatorAddress", Value.fromString(<string>value));
    }
  }

  get validatorAddress(): string | null {
    let value = this.get("validatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set validatorAddress(value: string | null) {
    if (!value) {
      this.unset("validatorAddress");
    } else {
      this.set("validatorAddress", Value.fromString(<string>value));
    }
  }

  get amount(): string | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set amount(value: string | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromString(<string>value));
    }
  }
}

export class MsgBeginRedelegate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgBeginRedelegate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgBeginRedelegate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgBeginRedelegate", id.toString(), this);
    }
  }

  static load(id: string): MsgBeginRedelegate | null {
    return changetype<MsgBeginRedelegate | null>(
      store.get("MsgBeginRedelegate", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get delegatorAddress(): string | null {
    let value = this.get("delegatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set delegatorAddress(value: string | null) {
    if (!value) {
      this.unset("delegatorAddress");
    } else {
      this.set("delegatorAddress", Value.fromString(<string>value));
    }
  }

  get validatorSrcAddress(): string | null {
    let value = this.get("validatorSrcAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set validatorSrcAddress(value: string | null) {
    if (!value) {
      this.unset("validatorSrcAddress");
    } else {
      this.set("validatorSrcAddress", Value.fromString(<string>value));
    }
  }

  get validatorDstAddress(): string | null {
    let value = this.get("validatorDstAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set validatorDstAddress(value: string | null) {
    if (!value) {
      this.unset("validatorDstAddress");
    } else {
      this.set("validatorDstAddress", Value.fromString(<string>value));
    }
  }

  get amount(): string | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set amount(value: string | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromString(<string>value));
    }
  }
}

export class MsgUndelegate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgUndelegate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgUndelegate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgUndelegate", id.toString(), this);
    }
  }

  static load(id: string): MsgUndelegate | null {
    return changetype<MsgUndelegate | null>(store.get("MsgUndelegate", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get delegatorAddress(): string | null {
    let value = this.get("delegatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set delegatorAddress(value: string | null) {
    if (!value) {
      this.unset("delegatorAddress");
    } else {
      this.set("delegatorAddress", Value.fromString(<string>value));
    }
  }

  get validatorAddress(): string | null {
    let value = this.get("validatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set validatorAddress(value: string | null) {
    if (!value) {
      this.unset("validatorAddress");
    } else {
      this.set("validatorAddress", Value.fromString(<string>value));
    }
  }

  get amount(): string | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set amount(value: string | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromString(<string>value));
    }
  }
}

export class MsgCreateVestingAccount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save MsgCreateVestingAccount entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgCreateVestingAccount must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgCreateVestingAccount", id.toString(), this);
    }
  }

  static load(id: string): MsgCreateVestingAccount | null {
    return changetype<MsgCreateVestingAccount | null>(
      store.get("MsgCreateVestingAccount", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fromAddress(): string | null {
    let value = this.get("fromAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fromAddress(value: string | null) {
    if (!value) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromString(<string>value));
    }
  }

  get toAddress(): string | null {
    let value = this.get("toAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set toAddress(value: string | null) {
    if (!value) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromString(<string>value));
    }
  }

  get amount(): string | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set amount(value: string | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromString(<string>value));
    }
  }

  get endTime(): BigInt | null {
    let value = this.get("endTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set endTime(value: BigInt | null) {
    if (!value) {
      this.unset("endTime");
    } else {
      this.set("endTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get delayed(): boolean {
    let value = this.get("delayed");
    return value!.toBoolean();
  }

  set delayed(value: boolean) {
    this.set("delayed", Value.fromBoolean(value));
  }
}

export class MsgTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgTransfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgTransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgTransfer", id.toString(), this);
    }
  }

  static load(id: string): MsgTransfer | null {
    return changetype<MsgTransfer | null>(store.get("MsgTransfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sourcePort(): string | null {
    let value = this.get("sourcePort");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sourcePort(value: string | null) {
    if (!value) {
      this.unset("sourcePort");
    } else {
      this.set("sourcePort", Value.fromString(<string>value));
    }
  }

  get sourceChannel(): string | null {
    let value = this.get("sourceChannel");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sourceChannel(value: string | null) {
    if (!value) {
      this.unset("sourceChannel");
    } else {
      this.set("sourceChannel", Value.fromString(<string>value));
    }
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get sender(): string | null {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sender(value: string | null) {
    if (!value) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromString(<string>value));
    }
  }

  get receiver(): string | null {
    let value = this.get("receiver");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set receiver(value: string | null) {
    if (!value) {
      this.unset("receiver");
    } else {
      this.set("receiver", Value.fromString(<string>value));
    }
  }

  get timeoutHeight(): string | null {
    let value = this.get("timeoutHeight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set timeoutHeight(value: string | null) {
    if (!value) {
      this.unset("timeoutHeight");
    } else {
      this.set("timeoutHeight", Value.fromString(<string>value));
    }
  }

  get timeoutTimestamp(): BigInt | null {
    let value = this.get("timeoutTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timeoutTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timeoutTimestamp");
    } else {
      this.set("timeoutTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class MsgChannelOpenInit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgChannelOpenInit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgChannelOpenInit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgChannelOpenInit", id.toString(), this);
    }
  }

  static load(id: string): MsgChannelOpenInit | null {
    return changetype<MsgChannelOpenInit | null>(
      store.get("MsgChannelOpenInit", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get portId(): string | null {
    let value = this.get("portId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set portId(value: string | null) {
    if (!value) {
      this.unset("portId");
    } else {
      this.set("portId", Value.fromString(<string>value));
    }
  }

  get channel(): string | null {
    let value = this.get("channel");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set channel(value: string | null) {
    if (!value) {
      this.unset("channel");
    } else {
      this.set("channel", Value.fromString(<string>value));
    }
  }

  get signer(): string | null {
    let value = this.get("signer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set signer(value: string | null) {
    if (!value) {
      this.unset("signer");
    } else {
      this.set("signer", Value.fromString(<string>value));
    }
  }
}

export class MsgChannelOpenTry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgChannelOpenTry entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgChannelOpenTry must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgChannelOpenTry", id.toString(), this);
    }
  }

  static load(id: string): MsgChannelOpenTry | null {
    return changetype<MsgChannelOpenTry | null>(
      store.get("MsgChannelOpenTry", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get portId(): string | null {
    let value = this.get("portId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set portId(value: string | null) {
    if (!value) {
      this.unset("portId");
    } else {
      this.set("portId", Value.fromString(<string>value));
    }
  }

  get previousChannelId(): string | null {
    let value = this.get("previousChannelId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set previousChannelId(value: string | null) {
    if (!value) {
      this.unset("previousChannelId");
    } else {
      this.set("previousChannelId", Value.fromString(<string>value));
    }
  }

  get channel(): string | null {
    let value = this.get("channel");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set channel(value: string | null) {
    if (!value) {
      this.unset("channel");
    } else {
      this.set("channel", Value.fromString(<string>value));
    }
  }

  get counterpartyVersion(): string | null {
    let value = this.get("counterpartyVersion");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set counterpartyVersion(value: string | null) {
    if (!value) {
      this.unset("counterpartyVersion");
    } else {
      this.set("counterpartyVersion", Value.fromString(<string>value));
    }
  }

  get proofInit(): Bytes | null {
    let value = this.get("proofInit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proofInit(value: Bytes | null) {
    if (!value) {
      this.unset("proofInit");
    } else {
      this.set("proofInit", Value.fromBytes(<Bytes>value));
    }
  }

  get proofHeight(): string | null {
    let value = this.get("proofHeight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proofHeight(value: string | null) {
    if (!value) {
      this.unset("proofHeight");
    } else {
      this.set("proofHeight", Value.fromString(<string>value));
    }
  }

  get signer(): string | null {
    let value = this.get("signer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set signer(value: string | null) {
    if (!value) {
      this.unset("signer");
    } else {
      this.set("signer", Value.fromString(<string>value));
    }
  }
}

export class MsgChannelOpenAck extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgChannelOpenAck entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgChannelOpenAck must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgChannelOpenAck", id.toString(), this);
    }
  }

  static load(id: string): MsgChannelOpenAck | null {
    return changetype<MsgChannelOpenAck | null>(
      store.get("MsgChannelOpenAck", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get portId(): string | null {
    let value = this.get("portId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set portId(value: string | null) {
    if (!value) {
      this.unset("portId");
    } else {
      this.set("portId", Value.fromString(<string>value));
    }
  }

  get channelId(): string | null {
    let value = this.get("channelId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set channelId(value: string | null) {
    if (!value) {
      this.unset("channelId");
    } else {
      this.set("channelId", Value.fromString(<string>value));
    }
  }

  get counterpartyChannelId(): string | null {
    let value = this.get("counterpartyChannelId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set counterpartyChannelId(value: string | null) {
    if (!value) {
      this.unset("counterpartyChannelId");
    } else {
      this.set("counterpartyChannelId", Value.fromString(<string>value));
    }
  }

  get counterpartyVersion(): string | null {
    let value = this.get("counterpartyVersion");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set counterpartyVersion(value: string | null) {
    if (!value) {
      this.unset("counterpartyVersion");
    } else {
      this.set("counterpartyVersion", Value.fromString(<string>value));
    }
  }

  get proofTry(): Bytes | null {
    let value = this.get("proofTry");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proofTry(value: Bytes | null) {
    if (!value) {
      this.unset("proofTry");
    } else {
      this.set("proofTry", Value.fromBytes(<Bytes>value));
    }
  }

  get proofHeight(): string | null {
    let value = this.get("proofHeight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proofHeight(value: string | null) {
    if (!value) {
      this.unset("proofHeight");
    } else {
      this.set("proofHeight", Value.fromString(<string>value));
    }
  }

  get signer(): string | null {
    let value = this.get("signer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set signer(value: string | null) {
    if (!value) {
      this.unset("signer");
    } else {
      this.set("signer", Value.fromString(<string>value));
    }
  }
}

export class MsgChannelOpenConfirm extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save MsgChannelOpenConfirm entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgChannelOpenConfirm must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgChannelOpenConfirm", id.toString(), this);
    }
  }

  static load(id: string): MsgChannelOpenConfirm | null {
    return changetype<MsgChannelOpenConfirm | null>(
      store.get("MsgChannelOpenConfirm", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get portId(): string | null {
    let value = this.get("portId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set portId(value: string | null) {
    if (!value) {
      this.unset("portId");
    } else {
      this.set("portId", Value.fromString(<string>value));
    }
  }

  get channelId(): string | null {
    let value = this.get("channelId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set channelId(value: string | null) {
    if (!value) {
      this.unset("channelId");
    } else {
      this.set("channelId", Value.fromString(<string>value));
    }
  }

  get proofAck(): Bytes | null {
    let value = this.get("proofAck");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proofAck(value: Bytes | null) {
    if (!value) {
      this.unset("proofAck");
    } else {
      this.set("proofAck", Value.fromBytes(<Bytes>value));
    }
  }

  get proofHeight(): string | null {
    let value = this.get("proofHeight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proofHeight(value: string | null) {
    if (!value) {
      this.unset("proofHeight");
    } else {
      this.set("proofHeight", Value.fromString(<string>value));
    }
  }

  get signer(): string | null {
    let value = this.get("signer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set signer(value: string | null) {
    if (!value) {
      this.unset("signer");
    } else {
      this.set("signer", Value.fromString(<string>value));
    }
  }
}

export class MsgChannelCloseInit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgChannelCloseInit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgChannelCloseInit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgChannelCloseInit", id.toString(), this);
    }
  }

  static load(id: string): MsgChannelCloseInit | null {
    return changetype<MsgChannelCloseInit | null>(
      store.get("MsgChannelCloseInit", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get portId(): string | null {
    let value = this.get("portId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set portId(value: string | null) {
    if (!value) {
      this.unset("portId");
    } else {
      this.set("portId", Value.fromString(<string>value));
    }
  }

  get channelId(): string | null {
    let value = this.get("channelId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set channelId(value: string | null) {
    if (!value) {
      this.unset("channelId");
    } else {
      this.set("channelId", Value.fromString(<string>value));
    }
  }

  get signer(): string | null {
    let value = this.get("signer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set signer(value: string | null) {
    if (!value) {
      this.unset("signer");
    } else {
      this.set("signer", Value.fromString(<string>value));
    }
  }
}

export class MsgChannelCloseConfirm extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save MsgChannelCloseConfirm entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgChannelCloseConfirm must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgChannelCloseConfirm", id.toString(), this);
    }
  }

  static load(id: string): MsgChannelCloseConfirm | null {
    return changetype<MsgChannelCloseConfirm | null>(
      store.get("MsgChannelCloseConfirm", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get portId(): string | null {
    let value = this.get("portId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set portId(value: string | null) {
    if (!value) {
      this.unset("portId");
    } else {
      this.set("portId", Value.fromString(<string>value));
    }
  }

  get channelId(): string | null {
    let value = this.get("channelId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set channelId(value: string | null) {
    if (!value) {
      this.unset("channelId");
    } else {
      this.set("channelId", Value.fromString(<string>value));
    }
  }

  get proofInit(): Bytes | null {
    let value = this.get("proofInit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proofInit(value: Bytes | null) {
    if (!value) {
      this.unset("proofInit");
    } else {
      this.set("proofInit", Value.fromBytes(<Bytes>value));
    }
  }

  get proofHeight(): string | null {
    let value = this.get("proofHeight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proofHeight(value: string | null) {
    if (!value) {
      this.unset("proofHeight");
    } else {
      this.set("proofHeight", Value.fromString(<string>value));
    }
  }

  get signer(): string | null {
    let value = this.get("signer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set signer(value: string | null) {
    if (!value) {
      this.unset("signer");
    } else {
      this.set("signer", Value.fromString(<string>value));
    }
  }
}

export class MsgRecvPacket extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgRecvPacket entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgRecvPacket must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgRecvPacket", id.toString(), this);
    }
  }

  static load(id: string): MsgRecvPacket | null {
    return changetype<MsgRecvPacket | null>(store.get("MsgRecvPacket", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get packet(): string | null {
    let value = this.get("packet");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set packet(value: string | null) {
    if (!value) {
      this.unset("packet");
    } else {
      this.set("packet", Value.fromString(<string>value));
    }
  }

  get proofCommitment(): Bytes | null {
    let value = this.get("proofCommitment");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proofCommitment(value: Bytes | null) {
    if (!value) {
      this.unset("proofCommitment");
    } else {
      this.set("proofCommitment", Value.fromBytes(<Bytes>value));
    }
  }

  get proofHeight(): string | null {
    let value = this.get("proofHeight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proofHeight(value: string | null) {
    if (!value) {
      this.unset("proofHeight");
    } else {
      this.set("proofHeight", Value.fromString(<string>value));
    }
  }

  get signer(): string | null {
    let value = this.get("signer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set signer(value: string | null) {
    if (!value) {
      this.unset("signer");
    } else {
      this.set("signer", Value.fromString(<string>value));
    }
  }
}

export class MsgTimeout extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgTimeout entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgTimeout must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgTimeout", id.toString(), this);
    }
  }

  static load(id: string): MsgTimeout | null {
    return changetype<MsgTimeout | null>(store.get("MsgTimeout", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get packet(): string | null {
    let value = this.get("packet");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set packet(value: string | null) {
    if (!value) {
      this.unset("packet");
    } else {
      this.set("packet", Value.fromString(<string>value));
    }
  }

  get proofUnreceived(): Bytes | null {
    let value = this.get("proofUnreceived");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proofUnreceived(value: Bytes | null) {
    if (!value) {
      this.unset("proofUnreceived");
    } else {
      this.set("proofUnreceived", Value.fromBytes(<Bytes>value));
    }
  }

  get proofHeight(): string | null {
    let value = this.get("proofHeight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proofHeight(value: string | null) {
    if (!value) {
      this.unset("proofHeight");
    } else {
      this.set("proofHeight", Value.fromString(<string>value));
    }
  }

  get nextSequenceRecv(): BigInt | null {
    let value = this.get("nextSequenceRecv");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextSequenceRecv(value: BigInt | null) {
    if (!value) {
      this.unset("nextSequenceRecv");
    } else {
      this.set("nextSequenceRecv", Value.fromBigInt(<BigInt>value));
    }
  }

  get signer(): string | null {
    let value = this.get("signer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set signer(value: string | null) {
    if (!value) {
      this.unset("signer");
    } else {
      this.set("signer", Value.fromString(<string>value));
    }
  }
}

export class MsgTimeoutOnClose extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgTimeoutOnClose entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgTimeoutOnClose must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgTimeoutOnClose", id.toString(), this);
    }
  }

  static load(id: string): MsgTimeoutOnClose | null {
    return changetype<MsgTimeoutOnClose | null>(
      store.get("MsgTimeoutOnClose", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get packet(): string | null {
    let value = this.get("packet");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set packet(value: string | null) {
    if (!value) {
      this.unset("packet");
    } else {
      this.set("packet", Value.fromString(<string>value));
    }
  }

  get proofUnreceived(): Bytes | null {
    let value = this.get("proofUnreceived");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proofUnreceived(value: Bytes | null) {
    if (!value) {
      this.unset("proofUnreceived");
    } else {
      this.set("proofUnreceived", Value.fromBytes(<Bytes>value));
    }
  }

  get proofClose(): Bytes | null {
    let value = this.get("proofClose");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proofClose(value: Bytes | null) {
    if (!value) {
      this.unset("proofClose");
    } else {
      this.set("proofClose", Value.fromBytes(<Bytes>value));
    }
  }

  get proofHeight(): string | null {
    let value = this.get("proofHeight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proofHeight(value: string | null) {
    if (!value) {
      this.unset("proofHeight");
    } else {
      this.set("proofHeight", Value.fromString(<string>value));
    }
  }

  get nextSequenceRecv(): BigInt | null {
    let value = this.get("nextSequenceRecv");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextSequenceRecv(value: BigInt | null) {
    if (!value) {
      this.unset("nextSequenceRecv");
    } else {
      this.set("nextSequenceRecv", Value.fromBigInt(<BigInt>value));
    }
  }

  get signer(): string | null {
    let value = this.get("signer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set signer(value: string | null) {
    if (!value) {
      this.unset("signer");
    } else {
      this.set("signer", Value.fromString(<string>value));
    }
  }
}

export class MsgAcknowledgement extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgAcknowledgement entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgAcknowledgement must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgAcknowledgement", id.toString(), this);
    }
  }

  static load(id: string): MsgAcknowledgement | null {
    return changetype<MsgAcknowledgement | null>(
      store.get("MsgAcknowledgement", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get packet(): string | null {
    let value = this.get("packet");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set packet(value: string | null) {
    if (!value) {
      this.unset("packet");
    } else {
      this.set("packet", Value.fromString(<string>value));
    }
  }

  get acknowledgement(): Bytes | null {
    let value = this.get("acknowledgement");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set acknowledgement(value: Bytes | null) {
    if (!value) {
      this.unset("acknowledgement");
    } else {
      this.set("acknowledgement", Value.fromBytes(<Bytes>value));
    }
  }

  get proofAcked(): Bytes | null {
    let value = this.get("proofAcked");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proofAcked(value: Bytes | null) {
    if (!value) {
      this.unset("proofAcked");
    } else {
      this.set("proofAcked", Value.fromBytes(<Bytes>value));
    }
  }

  get proofHeight(): string | null {
    let value = this.get("proofHeight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proofHeight(value: string | null) {
    if (!value) {
      this.unset("proofHeight");
    } else {
      this.set("proofHeight", Value.fromString(<string>value));
    }
  }

  get signer(): string | null {
    let value = this.get("signer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set signer(value: string | null) {
    if (!value) {
      this.unset("signer");
    } else {
      this.set("signer", Value.fromString(<string>value));
    }
  }
}

export class MsgCreateClient extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgCreateClient entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgCreateClient must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgCreateClient", id.toString(), this);
    }
  }

  static load(id: string): MsgCreateClient | null {
    return changetype<MsgCreateClient | null>(store.get("MsgCreateClient", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get clientState(): string | null {
    let value = this.get("clientState");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set clientState(value: string | null) {
    if (!value) {
      this.unset("clientState");
    } else {
      this.set("clientState", Value.fromString(<string>value));
    }
  }

  get consensusState(): string | null {
    let value = this.get("consensusState");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set consensusState(value: string | null) {
    if (!value) {
      this.unset("consensusState");
    } else {
      this.set("consensusState", Value.fromString(<string>value));
    }
  }

  get signer(): string | null {
    let value = this.get("signer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set signer(value: string | null) {
    if (!value) {
      this.unset("signer");
    } else {
      this.set("signer", Value.fromString(<string>value));
    }
  }
}

export class MsgUpdateClient extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgUpdateClient entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgUpdateClient must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgUpdateClient", id.toString(), this);
    }
  }

  static load(id: string): MsgUpdateClient | null {
    return changetype<MsgUpdateClient | null>(store.get("MsgUpdateClient", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get clientId(): string | null {
    let value = this.get("clientId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set clientId(value: string | null) {
    if (!value) {
      this.unset("clientId");
    } else {
      this.set("clientId", Value.fromString(<string>value));
    }
  }

  get header(): string | null {
    let value = this.get("header");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set header(value: string | null) {
    if (!value) {
      this.unset("header");
    } else {
      this.set("header", Value.fromString(<string>value));
    }
  }

  get signer(): string | null {
    let value = this.get("signer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set signer(value: string | null) {
    if (!value) {
      this.unset("signer");
    } else {
      this.set("signer", Value.fromString(<string>value));
    }
  }
}

export class MsgUpgradeClient extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgUpgradeClient entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgUpgradeClient must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgUpgradeClient", id.toString(), this);
    }
  }

  static load(id: string): MsgUpgradeClient | null {
    return changetype<MsgUpgradeClient | null>(
      store.get("MsgUpgradeClient", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get clientId(): string | null {
    let value = this.get("clientId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set clientId(value: string | null) {
    if (!value) {
      this.unset("clientId");
    } else {
      this.set("clientId", Value.fromString(<string>value));
    }
  }

  get clientState(): string | null {
    let value = this.get("clientState");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set clientState(value: string | null) {
    if (!value) {
      this.unset("clientState");
    } else {
      this.set("clientState", Value.fromString(<string>value));
    }
  }

  get consensusState(): string | null {
    let value = this.get("consensusState");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set consensusState(value: string | null) {
    if (!value) {
      this.unset("consensusState");
    } else {
      this.set("consensusState", Value.fromString(<string>value));
    }
  }

  get proofUpgradeClient(): Bytes | null {
    let value = this.get("proofUpgradeClient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proofUpgradeClient(value: Bytes | null) {
    if (!value) {
      this.unset("proofUpgradeClient");
    } else {
      this.set("proofUpgradeClient", Value.fromBytes(<Bytes>value));
    }
  }

  get proofUpgradeConsensusState(): Bytes | null {
    let value = this.get("proofUpgradeConsensusState");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proofUpgradeConsensusState(value: Bytes | null) {
    if (!value) {
      this.unset("proofUpgradeConsensusState");
    } else {
      this.set("proofUpgradeConsensusState", Value.fromBytes(<Bytes>value));
    }
  }

  get signer(): string | null {
    let value = this.get("signer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set signer(value: string | null) {
    if (!value) {
      this.unset("signer");
    } else {
      this.set("signer", Value.fromString(<string>value));
    }
  }
}

export class MsgSubmitMisbehaviour extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save MsgSubmitMisbehaviour entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgSubmitMisbehaviour must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgSubmitMisbehaviour", id.toString(), this);
    }
  }

  static load(id: string): MsgSubmitMisbehaviour | null {
    return changetype<MsgSubmitMisbehaviour | null>(
      store.get("MsgSubmitMisbehaviour", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get clientId(): string | null {
    let value = this.get("clientId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set clientId(value: string | null) {
    if (!value) {
      this.unset("clientId");
    } else {
      this.set("clientId", Value.fromString(<string>value));
    }
  }

  get misbehaviour(): string | null {
    let value = this.get("misbehaviour");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set misbehaviour(value: string | null) {
    if (!value) {
      this.unset("misbehaviour");
    } else {
      this.set("misbehaviour", Value.fromString(<string>value));
    }
  }

  get signer(): string | null {
    let value = this.get("signer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set signer(value: string | null) {
    if (!value) {
      this.unset("signer");
    } else {
      this.set("signer", Value.fromString(<string>value));
    }
  }
}

export class MsgConnectionOpenInit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save MsgConnectionOpenInit entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgConnectionOpenInit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgConnectionOpenInit", id.toString(), this);
    }
  }

  static load(id: string): MsgConnectionOpenInit | null {
    return changetype<MsgConnectionOpenInit | null>(
      store.get("MsgConnectionOpenInit", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get clientId(): string | null {
    let value = this.get("clientId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set clientId(value: string | null) {
    if (!value) {
      this.unset("clientId");
    } else {
      this.set("clientId", Value.fromString(<string>value));
    }
  }

  get counterparty(): string | null {
    let value = this.get("counterparty");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set counterparty(value: string | null) {
    if (!value) {
      this.unset("counterparty");
    } else {
      this.set("counterparty", Value.fromString(<string>value));
    }
  }

  get version(): string | null {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set version(value: string | null) {
    if (!value) {
      this.unset("version");
    } else {
      this.set("version", Value.fromString(<string>value));
    }
  }

  get delayPeriod(): BigInt | null {
    let value = this.get("delayPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set delayPeriod(value: BigInt | null) {
    if (!value) {
      this.unset("delayPeriod");
    } else {
      this.set("delayPeriod", Value.fromBigInt(<BigInt>value));
    }
  }

  get signer(): string | null {
    let value = this.get("signer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set signer(value: string | null) {
    if (!value) {
      this.unset("signer");
    } else {
      this.set("signer", Value.fromString(<string>value));
    }
  }
}

export class MsgConnectionOpenTry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgConnectionOpenTry entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgConnectionOpenTry must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgConnectionOpenTry", id.toString(), this);
    }
  }

  static load(id: string): MsgConnectionOpenTry | null {
    return changetype<MsgConnectionOpenTry | null>(
      store.get("MsgConnectionOpenTry", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get clientId(): string | null {
    let value = this.get("clientId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set clientId(value: string | null) {
    if (!value) {
      this.unset("clientId");
    } else {
      this.set("clientId", Value.fromString(<string>value));
    }
  }

  get previousConnectionId(): string | null {
    let value = this.get("previousConnectionId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set previousConnectionId(value: string | null) {
    if (!value) {
      this.unset("previousConnectionId");
    } else {
      this.set("previousConnectionId", Value.fromString(<string>value));
    }
  }

  get clientState(): string | null {
    let value = this.get("clientState");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set clientState(value: string | null) {
    if (!value) {
      this.unset("clientState");
    } else {
      this.set("clientState", Value.fromString(<string>value));
    }
  }

  get counterparty(): string | null {
    let value = this.get("counterparty");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set counterparty(value: string | null) {
    if (!value) {
      this.unset("counterparty");
    } else {
      this.set("counterparty", Value.fromString(<string>value));
    }
  }

  get delayPeriod(): BigInt | null {
    let value = this.get("delayPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set delayPeriod(value: BigInt | null) {
    if (!value) {
      this.unset("delayPeriod");
    } else {
      this.set("delayPeriod", Value.fromBigInt(<BigInt>value));
    }
  }

  get counterpartyVersions(): Array<string> | null {
    let value = this.get("counterpartyVersions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set counterpartyVersions(value: Array<string> | null) {
    if (!value) {
      this.unset("counterpartyVersions");
    } else {
      this.set(
        "counterpartyVersions",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get proofHeight(): string | null {
    let value = this.get("proofHeight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proofHeight(value: string | null) {
    if (!value) {
      this.unset("proofHeight");
    } else {
      this.set("proofHeight", Value.fromString(<string>value));
    }
  }

  get proofInit(): Bytes | null {
    let value = this.get("proofInit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proofInit(value: Bytes | null) {
    if (!value) {
      this.unset("proofInit");
    } else {
      this.set("proofInit", Value.fromBytes(<Bytes>value));
    }
  }

  get proofClient(): Bytes | null {
    let value = this.get("proofClient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proofClient(value: Bytes | null) {
    if (!value) {
      this.unset("proofClient");
    } else {
      this.set("proofClient", Value.fromBytes(<Bytes>value));
    }
  }

  get proofConsensus(): Bytes | null {
    let value = this.get("proofConsensus");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proofConsensus(value: Bytes | null) {
    if (!value) {
      this.unset("proofConsensus");
    } else {
      this.set("proofConsensus", Value.fromBytes(<Bytes>value));
    }
  }

  get consensusHeight(): string | null {
    let value = this.get("consensusHeight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set consensusHeight(value: string | null) {
    if (!value) {
      this.unset("consensusHeight");
    } else {
      this.set("consensusHeight", Value.fromString(<string>value));
    }
  }

  get signer(): string | null {
    let value = this.get("signer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set signer(value: string | null) {
    if (!value) {
      this.unset("signer");
    } else {
      this.set("signer", Value.fromString(<string>value));
    }
  }
}

export class MsgConnectionOpenAck extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MsgConnectionOpenAck entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgConnectionOpenAck must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgConnectionOpenAck", id.toString(), this);
    }
  }

  static load(id: string): MsgConnectionOpenAck | null {
    return changetype<MsgConnectionOpenAck | null>(
      store.get("MsgConnectionOpenAck", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get connectionId(): string | null {
    let value = this.get("connectionId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set connectionId(value: string | null) {
    if (!value) {
      this.unset("connectionId");
    } else {
      this.set("connectionId", Value.fromString(<string>value));
    }
  }

  get counterpartyConnectionId(): string | null {
    let value = this.get("counterpartyConnectionId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set counterpartyConnectionId(value: string | null) {
    if (!value) {
      this.unset("counterpartyConnectionId");
    } else {
      this.set("counterpartyConnectionId", Value.fromString(<string>value));
    }
  }

  get version(): string | null {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set version(value: string | null) {
    if (!value) {
      this.unset("version");
    } else {
      this.set("version", Value.fromString(<string>value));
    }
  }

  get clientState(): string | null {
    let value = this.get("clientState");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set clientState(value: string | null) {
    if (!value) {
      this.unset("clientState");
    } else {
      this.set("clientState", Value.fromString(<string>value));
    }
  }

  get proofHeight(): string | null {
    let value = this.get("proofHeight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proofHeight(value: string | null) {
    if (!value) {
      this.unset("proofHeight");
    } else {
      this.set("proofHeight", Value.fromString(<string>value));
    }
  }

  get proofTry(): Bytes | null {
    let value = this.get("proofTry");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proofTry(value: Bytes | null) {
    if (!value) {
      this.unset("proofTry");
    } else {
      this.set("proofTry", Value.fromBytes(<Bytes>value));
    }
  }

  get proofClient(): Bytes | null {
    let value = this.get("proofClient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proofClient(value: Bytes | null) {
    if (!value) {
      this.unset("proofClient");
    } else {
      this.set("proofClient", Value.fromBytes(<Bytes>value));
    }
  }

  get proofConsensus(): Bytes | null {
    let value = this.get("proofConsensus");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proofConsensus(value: Bytes | null) {
    if (!value) {
      this.unset("proofConsensus");
    } else {
      this.set("proofConsensus", Value.fromBytes(<Bytes>value));
    }
  }

  get consensusHeight(): string | null {
    let value = this.get("consensusHeight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set consensusHeight(value: string | null) {
    if (!value) {
      this.unset("consensusHeight");
    } else {
      this.set("consensusHeight", Value.fromString(<string>value));
    }
  }

  get signer(): string | null {
    let value = this.get("signer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set signer(value: string | null) {
    if (!value) {
      this.unset("signer");
    } else {
      this.set("signer", Value.fromString(<string>value));
    }
  }
}

export class MsgConnectionOpenConfirm extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save MsgConnectionOpenConfirm entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MsgConnectionOpenConfirm must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MsgConnectionOpenConfirm", id.toString(), this);
    }
  }

  static load(id: string): MsgConnectionOpenConfirm | null {
    return changetype<MsgConnectionOpenConfirm | null>(
      store.get("MsgConnectionOpenConfirm", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get connectionId(): string | null {
    let value = this.get("connectionId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set connectionId(value: string | null) {
    if (!value) {
      this.unset("connectionId");
    } else {
      this.set("connectionId", Value.fromString(<string>value));
    }
  }

  get proofAck(): Bytes | null {
    let value = this.get("proofAck");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proofAck(value: Bytes | null) {
    if (!value) {
      this.unset("proofAck");
    } else {
      this.set("proofAck", Value.fromBytes(<Bytes>value));
    }
  }

  get proofHeight(): string | null {
    let value = this.get("proofHeight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proofHeight(value: string | null) {
    if (!value) {
      this.unset("proofHeight");
    } else {
      this.set("proofHeight", Value.fromString(<string>value));
    }
  }

  get signer(): string | null {
    let value = this.get("signer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set signer(value: string | null) {
    if (!value) {
      this.unset("signer");
    } else {
      this.set("signer", Value.fromString(<string>value));
    }
  }
}

export class Channel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Channel entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Channel must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Channel", id.toString(), this);
    }
  }

  static load(id: string): Channel | null {
    return changetype<Channel | null>(store.get("Channel", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get state(): string | null {
    let value = this.get("state");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set state(value: string | null) {
    if (!value) {
      this.unset("state");
    } else {
      this.set("state", Value.fromString(<string>value));
    }
  }

  get ordering(): string | null {
    let value = this.get("ordering");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ordering(value: string | null) {
    if (!value) {
      this.unset("ordering");
    } else {
      this.set("ordering", Value.fromString(<string>value));
    }
  }

  get counterparty(): string | null {
    let value = this.get("counterparty");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set counterparty(value: string | null) {
    if (!value) {
      this.unset("counterparty");
    } else {
      this.set("counterparty", Value.fromString(<string>value));
    }
  }

  get connectionHops(): Array<string> | null {
    let value = this.get("connectionHops");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set connectionHops(value: Array<string> | null) {
    if (!value) {
      this.unset("connectionHops");
    } else {
      this.set("connectionHops", Value.fromStringArray(<Array<string>>value));
    }
  }

  get version(): string | null {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set version(value: string | null) {
    if (!value) {
      this.unset("version");
    } else {
      this.set("version", Value.fromString(<string>value));
    }
  }
}

export class ChannelCounterparty extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ChannelCounterparty entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ChannelCounterparty must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ChannelCounterparty", id.toString(), this);
    }
  }

  static load(id: string): ChannelCounterparty | null {
    return changetype<ChannelCounterparty | null>(
      store.get("ChannelCounterparty", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get portId(): string | null {
    let value = this.get("portId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set portId(value: string | null) {
    if (!value) {
      this.unset("portId");
    } else {
      this.set("portId", Value.fromString(<string>value));
    }
  }

  get channelId(): string | null {
    let value = this.get("channelId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set channelId(value: string | null) {
    if (!value) {
      this.unset("channelId");
    } else {
      this.set("channelId", Value.fromString(<string>value));
    }
  }
}

export class CommissionRates extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CommissionRates entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CommissionRates must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CommissionRates", id.toString(), this);
    }
  }

  static load(id: string): CommissionRates | null {
    return changetype<CommissionRates | null>(store.get("CommissionRates", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rate(): string | null {
    let value = this.get("rate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set rate(value: string | null) {
    if (!value) {
      this.unset("rate");
    } else {
      this.set("rate", Value.fromString(<string>value));
    }
  }

  get maxRate(): string | null {
    let value = this.get("maxRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set maxRate(value: string | null) {
    if (!value) {
      this.unset("maxRate");
    } else {
      this.set("maxRate", Value.fromString(<string>value));
    }
  }

  get maxChangeRate(): string | null {
    let value = this.get("maxChangeRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set maxChangeRate(value: string | null) {
    if (!value) {
      this.unset("maxChangeRate");
    } else {
      this.set("maxChangeRate", Value.fromString(<string>value));
    }
  }
}

export class ConnectionCounterparty extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ConnectionCounterparty entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ConnectionCounterparty must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ConnectionCounterparty", id.toString(), this);
    }
  }

  static load(id: string): ConnectionCounterparty | null {
    return changetype<ConnectionCounterparty | null>(
      store.get("ConnectionCounterparty", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get clientId(): string | null {
    let value = this.get("clientId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set clientId(value: string | null) {
    if (!value) {
      this.unset("clientId");
    } else {
      this.set("clientId", Value.fromString(<string>value));
    }
  }

  get connectionId(): string | null {
    let value = this.get("connectionId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set connectionId(value: string | null) {
    if (!value) {
      this.unset("connectionId");
    } else {
      this.set("connectionId", Value.fromString(<string>value));
    }
  }

  get prefix(): string | null {
    let value = this.get("prefix");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set prefix(value: string | null) {
    if (!value) {
      this.unset("prefix");
    } else {
      this.set("prefix", Value.fromString(<string>value));
    }
  }
}

export class ConnectionVersion extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ConnectionVersion entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ConnectionVersion must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ConnectionVersion", id.toString(), this);
    }
  }

  static load(id: string): ConnectionVersion | null {
    return changetype<ConnectionVersion | null>(
      store.get("ConnectionVersion", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get identifier(): string | null {
    let value = this.get("identifier");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set identifier(value: string | null) {
    if (!value) {
      this.unset("identifier");
    } else {
      this.set("identifier", Value.fromString(<string>value));
    }
  }

  get features(): Array<string> | null {
    let value = this.get("features");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set features(value: Array<string> | null) {
    if (!value) {
      this.unset("features");
    } else {
      this.set("features", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Description extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Description entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Description must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Description", id.toString(), this);
    }
  }

  static load(id: string): Description | null {
    return changetype<Description | null>(store.get("Description", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get moniker(): string | null {
    let value = this.get("moniker");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set moniker(value: string | null) {
    if (!value) {
      this.unset("moniker");
    } else {
      this.set("moniker", Value.fromString(<string>value));
    }
  }

  get identity(): string | null {
    let value = this.get("identity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set identity(value: string | null) {
    if (!value) {
      this.unset("identity");
    } else {
      this.set("identity", Value.fromString(<string>value));
    }
  }

  get website(): string | null {
    let value = this.get("website");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set website(value: string | null) {
    if (!value) {
      this.unset("website");
    } else {
      this.set("website", Value.fromString(<string>value));
    }
  }

  get securityContact(): string | null {
    let value = this.get("securityContact");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set securityContact(value: string | null) {
    if (!value) {
      this.unset("securityContact");
    } else {
      this.set("securityContact", Value.fromString(<string>value));
    }
  }

  get details(): string | null {
    let value = this.get("details");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set details(value: string | null) {
    if (!value) {
      this.unset("details");
    } else {
      this.set("details", Value.fromString(<string>value));
    }
  }
}

export class Height extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Height entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Height must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Height", id.toString(), this);
    }
  }

  static load(id: string): Height | null {
    return changetype<Height | null>(store.get("Height", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get revisionNumber(): BigInt | null {
    let value = this.get("revisionNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set revisionNumber(value: BigInt | null) {
    if (!value) {
      this.unset("revisionNumber");
    } else {
      this.set("revisionNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get revisionHeight(): BigInt | null {
    let value = this.get("revisionHeight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set revisionHeight(value: BigInt | null) {
    if (!value) {
      this.unset("revisionHeight");
    } else {
      this.set("revisionHeight", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Input extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Input entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Input must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Input", id.toString(), this);
    }
  }

  static load(id: string): Input | null {
    return changetype<Input | null>(store.get("Input", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string | null {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set address(value: string | null) {
    if (!value) {
      this.unset("address");
    } else {
      this.set("address", Value.fromString(<string>value));
    }
  }

  get coins(): Array<string> | null {
    let value = this.get("coins");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set coins(value: Array<string> | null) {
    if (!value) {
      this.unset("coins");
    } else {
      this.set("coins", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Output extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Output entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Output must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Output", id.toString(), this);
    }
  }

  static load(id: string): Output | null {
    return changetype<Output | null>(store.get("Output", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string | null {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set address(value: string | null) {
    if (!value) {
      this.unset("address");
    } else {
      this.set("address", Value.fromString(<string>value));
    }
  }

  get coins(): Array<string> | null {
    let value = this.get("coins");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set coins(value: Array<string> | null) {
    if (!value) {
      this.unset("coins");
    } else {
      this.set("coins", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class MerklePrefix extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MerklePrefix entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MerklePrefix must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MerklePrefix", id.toString(), this);
    }
  }

  static load(id: string): MerklePrefix | null {
    return changetype<MerklePrefix | null>(store.get("MerklePrefix", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get keyPrefix(): Bytes | null {
    let value = this.get("keyPrefix");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set keyPrefix(value: Bytes | null) {
    if (!value) {
      this.unset("keyPrefix");
    } else {
      this.set("keyPrefix", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Packet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Packet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Packet must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Packet", id.toString(), this);
    }
  }

  static load(id: string): Packet | null {
    return changetype<Packet | null>(store.get("Packet", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sequence(): BigInt | null {
    let value = this.get("sequence");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sequence(value: BigInt | null) {
    if (!value) {
      this.unset("sequence");
    } else {
      this.set("sequence", Value.fromBigInt(<BigInt>value));
    }
  }

  get sourcePort(): string | null {
    let value = this.get("sourcePort");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sourcePort(value: string | null) {
    if (!value) {
      this.unset("sourcePort");
    } else {
      this.set("sourcePort", Value.fromString(<string>value));
    }
  }

  get sourceChannel(): string | null {
    let value = this.get("sourceChannel");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sourceChannel(value: string | null) {
    if (!value) {
      this.unset("sourceChannel");
    } else {
      this.set("sourceChannel", Value.fromString(<string>value));
    }
  }

  get destinationPort(): string | null {
    let value = this.get("destinationPort");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set destinationPort(value: string | null) {
    if (!value) {
      this.unset("destinationPort");
    } else {
      this.set("destinationPort", Value.fromString(<string>value));
    }
  }

  get destinationChannel(): string | null {
    let value = this.get("destinationChannel");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set destinationChannel(value: string | null) {
    if (!value) {
      this.unset("destinationChannel");
    } else {
      this.set("destinationChannel", Value.fromString(<string>value));
    }
  }

  get data(): Bytes | null {
    let value = this.get("data");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set data(value: Bytes | null) {
    if (!value) {
      this.unset("data");
    } else {
      this.set("data", Value.fromBytes(<Bytes>value));
    }
  }

  get timeoutHeight(): string | null {
    let value = this.get("timeoutHeight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set timeoutHeight(value: string | null) {
    if (!value) {
      this.unset("timeoutHeight");
    } else {
      this.set("timeoutHeight", Value.fromString(<string>value));
    }
  }

  get timeoutTimestamp(): BigInt | null {
    let value = this.get("timeoutTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timeoutTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timeoutTimestamp");
    } else {
      this.set("timeoutTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class CosmosHeader extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CosmosHeader entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CosmosHeader must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CosmosHeader", id.toString(), this);
    }
  }

  static load(id: string): CosmosHeader | null {
    return changetype<CosmosHeader | null>(store.get("CosmosHeader", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get signedHeader(): string | null {
    let value = this.get("signedHeader");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set signedHeader(value: string | null) {
    if (!value) {
      this.unset("signedHeader");
    } else {
      this.set("signedHeader", Value.fromString(<string>value));
    }
  }

  get validatorSet(): string | null {
    let value = this.get("validatorSet");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set validatorSet(value: string | null) {
    if (!value) {
      this.unset("validatorSet");
    } else {
      this.set("validatorSet", Value.fromString(<string>value));
    }
  }

  get trustedHeight(): string | null {
    let value = this.get("trustedHeight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set trustedHeight(value: string | null) {
    if (!value) {
      this.unset("trustedHeight");
    } else {
      this.set("trustedHeight", Value.fromString(<string>value));
    }
  }

  get trustedValidators(): string | null {
    let value = this.get("trustedValidators");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set trustedValidators(value: string | null) {
    if (!value) {
      this.unset("trustedValidators");
    } else {
      this.set("trustedValidators", Value.fromString(<string>value));
    }
  }
}

export class Delegation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Delegation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Delegation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Delegation", id.toString(), this);
    }
  }

  static load(id: string): Delegation | null {
    return changetype<Delegation | null>(store.get("Delegation", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get delegatorAddress(): string | null {
    let value = this.get("delegatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set delegatorAddress(value: string | null) {
    if (!value) {
      this.unset("delegatorAddress");
    } else {
      this.set("delegatorAddress", Value.fromString(<string>value));
    }
  }

  get validatorAddress(): string | null {
    let value = this.get("validatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set validatorAddress(value: string | null) {
    if (!value) {
      this.unset("validatorAddress");
    } else {
      this.set("validatorAddress", Value.fromString(<string>value));
    }
  }

  get amount(): string | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set amount(value: string | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromString(<string>value));
    }
  }
}
